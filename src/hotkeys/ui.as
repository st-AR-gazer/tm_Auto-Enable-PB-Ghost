namespace HotkeyUI {
    const vec4 COL_ERR  = vec4(1, 0.25, 0.25, 1);
    const vec4 COL_OK   = vec4(0.25, 1, 0.25, 1);
    const vec4 COL_DEL  = vec4(1, 0.15, 0.15, 1);
    const vec4 COL_MOVE = vec4(0.5, 0.5, 0.5, 0.65);

    const vec2 OP_BTN (34, 0);
    const vec2 MOVE_BTN(30, 0);
    const vec2 TOK_BTN (70, 0);
    const vec2 DEL_BTN (70, 0);
    const vec2 CAP_BTN (90, 0);

    const string CFGPATH     = IO::FromDataFolder(Hotkeys::CFG);
    const string THIS_PLUGIN = Meta::ExecutingPlugin().Name.ToLower();

    string g_HoverText = "";

    void Hover(const string &in msg) { if (UI::IsItemHovered()) g_HoverText = msg; }

    class Binding {
        bool   enabled = true;
        string plugin;
        string mod;
        string act;
        string expr;
        string desc;
    }

    class EditTab {
        int    idx = -1;
        bool   simple = true;
        string expr;
        string desc;

        array<string> tokens;
        bool          capture = false;
        dictionary    held;

        string Build() const { return string::Join(tokens, " "); }

        string Title() const {
            if (idx < 0) return "＋ New";
            auto b = g_Binds[uint(idx)];
            return b.plugin + "." + b.mod + "." + b.act;
        }
    }

    array<Binding@> g_Binds;
    array<EditTab@> g_Tabs;
    int   g_ActiveTab = -1;

    bool  g_FilterPlugin = false;
    float g_ChildH      = 120;

    bool Pass(const Binding@ b) { return !g_FilterPlugin || b.plugin.ToLower() == THIS_PLUGIN; }

    void LoadFile() {
        g_Binds.Resize(0);
        if (!IO::FileExists(CFGPATH)) return;

        IO::File f(CFGPATH, IO::FileMode::Read);
        for (string ln; !f.EOF(); ) {
            ln = f.ReadLine().Trim();
            if (ln == "" || ln.StartsWith("#")) continue;

            int eq = ln.IndexOf("=");
            if (eq < 0) continue;

            string lhs = ln.SubStr(0, eq).Trim();
            string rhs = ln.SubStr(eq + 1).Trim();

            string desc;
            int sc = rhs.IndexOf(";");
            if (sc >= 0) { desc = rhs.SubStr(sc + 1).Trim();
            rhs = rhs.SubStr(0, sc).Trim(); }

            int fi = lhs.IndexOf(".");
            int la = lhs.LastIndexOf(".");
            if (fi < 0 || la <= fi) continue;

            Binding b;
            b.plugin = lhs.SubStr(0, fi).Trim();
            b.mod    = lhs.SubStr(fi + 1, la - fi - 1).Trim();
            b.act    = lhs.SubStr(la + 1).Trim();
            b.expr   = rhs;
            b.desc   = desc;
            g_Binds.InsertLast(b);
        }
        f.Close();
    }

    void SaveFile() {
        IO::File f(CFGPATH, IO::FileMode::Write);
        f.WriteLine("# Hotkeys.cfg - generated by Hotkey Manager");
        for (uint i = 0; i < g_Binds.Length; ++i) {
            auto b = g_Binds[i];
            if (!b.enabled) continue;
            string ln = b.plugin + "." + b.mod + "." + b.act + " = " + b.expr;
            if (b.desc != "") ln += " ; " + b.desc;
            f.WriteLine(ln);
        }
        f.Close();
        Hotkeys::_Load();
    }

    UI::InputBlocking OnKeyPress(bool, VirtualKey key) {
        if (g_ActiveTab < 0) return UI::InputBlocking::DoNothing;
        auto tab = g_Tabs[g_ActiveTab];
        if (!tab.capture) return UI::InputBlocking::DoNothing;

        tab.tokens.InsertLast(tostring(key));
        tab.capture = false;
        tab.held.DeleteAll();
        return UI::InputBlocking::DoNothing;
    }

    void Op(const string &in op, EditTab@ t, const string &in hint) {
        if (UI::Button(op, OP_BTN)) t.tokens.InsertLast(op);
        Hover(hint); UI::SameLine();
    }

    void MoveRow(EditTab@ t) {
        for (uint i = 0; i < t.tokens.Length; ++i) {
            UI::PushID(int(i));
            UI::PushStyleColor(UI::Col::Button, COL_MOVE);

            UI::BeginDisabled(i == 0);
            if (UI::Button(Icons::ChevronLeft, MOVE_BTN)) { string tmp = t.tokens[i-1]; t.tokens[i-1] = t.tokens[i]; t.tokens[i] = tmp; }
            Hover("Move token left");
            UI::EndDisabled(); UI::SameLine();

            UI::BeginDisabled(i + 1 >= t.tokens.Length);
            if (UI::Button(Icons::ChevronRight, MOVE_BTN)) { string tmp = t.tokens[i+1]; t.tokens[i+1] = t.tokens[i]; t.tokens[i] = tmp; }
            Hover("Move token right");
            UI::EndDisabled();

            UI::PopStyleColor();
            if (i + 1 < t.tokens.Length) UI::SameLine();
            UI::PopID();
        }
        if (t.tokens.Length > 0) UI::NewLine();
    }

    void TokenRow(EditTab@ t) {
        for (uint i = 0; i < t.tokens.Length; ++i) {
            UI::PushID(int(i));
            UI::Button(t.tokens[i], TOK_BTN);
            Hover("Token: " + t.tokens[i]);
            if (i + 1 < t.tokens.Length) UI::SameLine();
            UI::PopID();
        }
        if (t.tokens.Length > 0) UI::NewLine();
    }

    void DelRow(EditTab@ t) {
        for (uint i = 0; i < t.tokens.Length; ++i) {
            UI::PushID(int(i));
            UI::PushStyleColor(UI::Col::Button, COL_DEL);
            if (UI::Button("×", DEL_BTN)) { t.tokens.RemoveAt(i); UI::PopStyleColor(); UI::PopID(); i--; continue; }
            Hover("Remove token");
            UI::PopStyleColor();
            if (i + 1 < t.tokens.Length) UI::SameLine();
            UI::PopID();
        }
        if (t.tokens.Length > 0) UI::NewLine();
    }

    void DrawTab(EditTab@ t) {
        if (UI::Selectable("∙ Simple",  t.simple)) t.simple = !t.simple;
        UI::SameLine();
        if (UI::Selectable("Advanced", !t.simple)) t.simple = !t.simple;
        UI::Separator();

        g_HoverText =
            "Hotkey DSL:\n"
            "+  AND (all held)\n"
            "|  OR  (any)\n"
            "&> Sequence\n"
            "( ) Group\n"
            "Click Capture to record one key.";

        if (t.simple) {
            if (UI::BeginTable("builder"+t.idx, 2, UI::TableFlags::BordersInnerV)) {
                UI::TableSetupColumn("edit", UI::TableColumnFlags::WidthFixed, 380);
                UI::TableNextRow();
                UI::TableSetColumnIndex(0);

                UI::PushStyleVar(UI::StyleVar::ItemSpacing, vec2(UI::GetStyleVarVec2(UI::StyleVar::ItemSpacing).x, 2));

                if (!t.capture) {
                    if (UI::Button(Icons::KeyboardO + " Capture", CAP_BTN)) { t.capture = true; t.held.DeleteAll(); }
                    Hover("Capture a single key");
                } else { UI::Text("\\$ff0<press>"); }
                UI::SameLine();

                Op("+",  t, "AND operator");
                Op("|",  t, "OR operator");
                Op("&>", t, "Sequence operator");
                Op("(",  t, "Open parenthesis");
                if (UI::Button(")", OP_BTN)) t.tokens.InsertLast(")");
                Hover("Close parenthesis");
                UI::NewLine();

                MoveRow(t);
                TokenRow(t);
                DelRow(t);

                UI::PopStyleVar();

                t.expr = t.Build();

                UI::TableSetColumnIndex(1);
                UI::TextWrapped(g_HoverText);

                UI::EndTable();
            }
        } else {
            UI::BeginTable("adv" + t.idx, 2, UI::TableFlags::BordersInnerV);
            UI::TableSetupColumn("edit", UI::TableColumnFlags::WidthFixed, 380);
            UI::TableNextRow();
            UI::TableSetColumnIndex(0);

            UI::Text("Expression:");
            UI::SetNextItemWidth(340);
            t.expr = UI::InputText("##expr" + t.idx, t.expr);
            Hover("Edit full expression");

            UI::TableSetColumnIndex(1);
            UI::TextWrapped(
                "Write full DSL, e.g.\n"
                "  F5 | Ctrl + A\n"
                "  Ctrl + S &> F\n"
                "Operators: +  |  &>\n"
                "Use parentheses to group."
            );
            UI::EndTable();
        }

        Hotkeys::Parser p(t.expr);
        bool ok = p.Parse() !is null;
        UI::PushStyleColor(UI::Col::Text, ok ? COL_OK : COL_ERR);
        UI::Text(ok ? "✓ valid" : "× parse error");
        UI::PopStyleColor();
        UI::SameLine();
        if (UI::Button("Apply##"+t.idx) && ok) {
            if (t.idx < 0) {
                Binding b;
                b.plugin = Meta::ExecutingPlugin().Name;
                b.mod = "Module"; b.act = "Action";
                b.expr = t.expr;
                g_Binds.InsertLast(b);
                t.idx = int(g_Binds.Length) - 1;
            } else {
                auto b = g_Binds[uint(t.idx)];
                b.expr = t.expr;
            }
        }
    }

    [SettingsTab name="Hotkeys" icon="KeyboardO" order="2"]
    void Draw() {
        if (g_Binds.Length == 0) LoadFile();
        float spaceY = UI::GetStyleVarVec2(UI::StyleVar::ItemSpacing).y;

        if (UI::BeginChild("HKMgr", vec2(0, 0), true)) {
            if (UI::Button(Icons::Plus + "  Add")) { auto@ t = EditTab(); g_Tabs.InsertLast(t); g_ActiveTab = g_Tabs.Length - 1; }
            UI::SameLine();
            if (UI::Button(Icons::FloppyO + "  Save & Reload")) SaveFile();
            UI::SameLine();
            g_FilterPlugin = UI::Checkbox("Show only this plugin", g_FilterPlugin);
            UI::Separator();

            if (UI::BeginTable("tbl", 6, UI::TableFlags::Resizable)) {
                UI::TableSetupColumn("✓", UI::TableColumnFlags::WidthFixed, 35);
                UI::TableSetupColumn("Plugin");
                UI::TableSetupColumn("Module");
                UI::TableSetupColumn("Action");
                UI::TableSetupColumn("Expression");
                UI::TableSetupColumn("…", UI::TableColumnFlags::WidthFixed, 60);
                UI::TableHeadersRow();

                for (uint i = 0; i < g_Binds.Length; ++i) {
                    auto b = g_Binds[i]; if (!Pass(b)) continue;
                    UI::TableNextRow();
                    UI::TableSetColumnIndex(0); UI::Checkbox("##en"+i, b.enabled);
                    UI::TableSetColumnIndex(1); UI::Text(b.plugin);
                    UI::TableSetColumnIndex(2); UI::Text(b.mod);
                    UI::TableSetColumnIndex(3); UI::Text(b.act);
                    UI::TableSetColumnIndex(4); UI::Text(b.expr);
                    UI::TableSetColumnIndex(5);
                    if (UI::Button(Icons::Pencil + "##e" + i)) {
                        auto t = EditTab();
                        t.idx = int(i);
                        t.expr = b.expr;
                        t.simple = false;
                        g_Tabs.InsertLast(t);
                        g_ActiveTab = g_Tabs.Length - 1;
                    }
                    UI::SameLine();
                    if (UI::Button(Icons::Trash+"##d"+i)) g_Binds.RemoveAt(i--);
                }
                UI::EndTable();
            }

            UI::Dummy(vec2(0, UI::GetContentRegionAvail().y - spaceY - g_ChildH));
            vec2 start = UI::GetCursorPos();

            UI::BeginTabBar("editTabs");
            for (uint i = 0; i < g_Tabs.Length; ++i) {
                auto tab = g_Tabs[i]; bool open = true;
                if (UI::BeginTabItem(tab.Title(), open, i == uint(g_ActiveTab) ? UI::TabItemFlags::SetSelected : UI::TabItemFlags::None)) {
                    g_ActiveTab = int(i);
                    DrawTab(tab);
                    UI::EndTabItem();
                }
                if (!open) {
                    g_Tabs.RemoveAt(i);
                    if (g_ActiveTab >= int(i)) g_ActiveTab--;
                    i--;
                }
            }
            UI::EndTabBar();

            g_ChildH = UI::GetCursorPos().y - start.y;
            UI::EndChild();
        }
    }
}